# core/workflows.py
"""
Orquestra√ß√£o dos workflows principais do sistema - Vers√£o Corrigida
"""
from pathlib import Path
from typing import Optional, Tuple
from datetime import date

class WorkflowManager:
    """Classe para gerenciar os workflows principais"""
    
    def __init__(self, config, transcriber, speaker_mapper, audio_processor, gemini_client):
        """
        Inicializa o gerenciador de workflows
        
        Args:
            config: Inst√¢ncia de Config
            transcriber: Inst√¢ncia de WhisperTranscriber
            speaker_mapper: Inst√¢ncia de SpeakerMapper
            audio_processor: Inst√¢ncia de AudioProcessor
            gemini_client: Inst√¢ncia de GeminiClient
        """
        self.config = config
        self.transcriber = transcriber
        self.speaker_mapper = speaker_mapper
        self.audio_processor = audio_processor
        self.gemini_client = gemini_client
    
    def run_transcription_workflow(self) -> Optional[Tuple[int, date]]:
        """
        Executa workflow de transcri√ß√£o completo
        
        Returns:
            Tuple[int, date]: (session_number, session_date) ou None se erro
        """
        print("\\nüöÄ INICIANDO WORKFLOW DE TRANSCRI√á√ÉO")
        print("=" * 50)
        
        # Passo 1: Processar informa√ß√µes da sess√£o
        print("\\n[Passo 1/4] Processando informa√ß√µes da sess√£o...")
        session_info = self._process_session_info()
        if not session_info:
            print("‚ùå Erro ao determinar informa√ß√µes da sess√£o.")
            return None
        
        session_number, session_date = session_info
        print(f"‚úÖ Sess√£o: {session_number}")
        print(f"‚úÖ Data: {session_date.strftime('%Y-%m-%d')}")
        
        # Passo 2: Extrair arquivos de √°udio
        print("\\n[Passo 2/4] Extraindo arquivos de √°udio...")
        if not self.audio_processor.extract_audio_files():
            print("‚ùå Erro ao extrair arquivos de √°udio.")
            return None
        print("‚úÖ Arquivos de √°udio prontos para transcri√ß√£o!")
        
        # Passo 3: Transcri√ß√£o de √°udio
        print("\\n[Passo 3/4] Transcri√ß√£o de √°udio...")
        if not self.transcriber.transcribe_audio():
            print("‚ùå Erro na transcri√ß√£o. Abortando workflow.")
            return None
        print("‚úÖ Transcri√ß√£o conclu√≠da com sucesso.")
        
        # Passo 4: Combina√ß√£o de transcri√ß√µes
        print("\\n[Passo 4/4] Combina√ß√£o de transcri√ß√µes...")
        transcript_file = self.speaker_mapper.combine_transcriptions(session_number)
        if not transcript_file:
            print("‚ùå Erro ao combinar transcri√ß√µes.")
            return None
        
        # Verificar se arquivo tem conte√∫do
        if not self._validate_transcript_content(transcript_file):
            print("‚ùå Arquivo de transcri√ß√£o est√° vazio.")
            return None
        
        print("\\n‚ú® WORKFLOW DE TRANSCRI√á√ÉO CONCLU√çDO! ‚ú®")
        return session_number, session_date
    
    def run_full_workflow(self) -> bool:
        """
        Executa workflow completo incluindo gera√ß√£o de IA
        
        Returns:
            bool: True se workflow foi bem-sucedido
        """
        print("\\nüöÄ INICIANDO WORKFLOW COMPLETO")
        print("=" * 50)
        
        # Executa workflow de transcri√ß√£o
        result = self.run_transcription_workflow()
        if not result:
            return False
        
        session_number, session_date = result
        
        # Passo 5: Gera√ß√£o de notas com IA
        print("\\n[Passo 5/5] Gera√ß√£o de notas com IA...")
        transcript_file = self.config.TRANSCRIPTIONS_OUTPUT_DIR / f"session{session_number}.txt"
        
        try:
            notes = self.gemini_client.generate_session_notes(transcript_file)
            if notes:
                summary, structured_data = notes
                self.gemini_client.save_summary_file(summary, structured_data, session_number, session_date)
                print("‚úÖ Notas com IA geradas e salvas com sucesso.")
            else:
                print("‚ö†Ô∏è Gera√ß√£o de notas com IA foi pulada ou falhou.")
        except Exception as e:
            print(f"‚ùå Erro na gera√ß√£o de notas: {e}")
            return False
        
        print("\\n‚ú® WORKFLOW COMPLETO FINALIZADO! ‚ú®")
        return True
    
    def workflow_status_check(self) -> dict:
        """
        Verifica status dos componentes do workflow
        
        Returns:
            dict: Status dos componentes
        """
        status = {
            'config_valid': False,
            'audio_files_available': False,
            'transcriptions_exist': False,
            'api_configured': False,
            'required_files_exist': False
        }
        
        try:
            # Verifica configura√ß√£o
            self.config.validate_required_files()
            status['config_valid'] = True
            status['required_files_exist'] = True
        except:
            pass
        
        # Verifica arquivos de √°udio
        audio_files = list(self.config.AUDIO_OUTPUT_DIR.glob("*.flac"))
        if audio_files:
            status['audio_files_available'] = True
        
        # Verifica transcri√ß√µes existentes
        transcription_files = list(self.config.TEMP_TRANSCRIPTIONS.glob("*.json"))
        if transcription_files:
            status['transcriptions_exist'] = True
        
        # Verifica configura√ß√£o da API
        if self.config.GEMINI_API_KEY:
            status['api_configured'] = True
        
        return status
    
    def _process_session_info(self) -> Optional[Tuple[int, date]]:
        """
        Processa informa√ß√µes da sess√£o (n√∫mero e data)
        
        Returns:
            Tuple[int, date]: (session_number, session_date) ou None se erro
        """
        # Import local para evitar depend√™ncia circular
        from core.session_manager import SessionManager
        
        session_manager = SessionManager(self.config)
        return session_manager.process_chat_log()
    
    def _validate_transcript_content(self, transcript_file: Path) -> bool:
        """
        Valida se arquivo de transcri√ß√£o tem conte√∫do
        
        Args:
            transcript_file: Caminho para arquivo de transcri√ß√£o
            
        Returns:
            bool: True se arquivo tem conte√∫do v√°lido
        """
        try:
            with open(transcript_file, 'r', encoding='utf-8') as f:
                content = f.read().strip()
            
            if not content:
                return False
            
            # Mostra estat√≠sticas
            char_count = len(content)
            word_count = len(content.split())
            print(f"‚úÖ Transcri√ß√µes combinadas ({char_count} chars, ~{word_count} palavras)")
            
            return True
            
        except Exception as e:
            print(f"‚ùå Erro ao verificar arquivo combinado: {e}")
            return False
    
    def get_workflow_summary(self) -> dict:
        """
        Retorna resumo do √∫ltimo workflow executado
        
        Returns:
            dict: Resumo das estat√≠sticas
        """
        # Pega estat√≠sticas dos componentes
        transcriber_stats = self.transcriber.get_transcription_stats()
        
        # √öltima sess√£o processada
        output_files = list(self.config.OUTPUT_DIR.glob("Sess√£o *.md"))
        last_session = None
        if output_files:
            last_session = max(output_files, key=lambda x: x.stat().st_mtime)
        
        return {
            'transcription_stats': transcriber_stats,
            'last_session_file': str(last_session) if last_session else None,
            'total_sessions_processed': len(output_files),
            'workflow_status': self.workflow_status_check()
        }

def create_workflow_manager(config, transcriber, speaker_mapper, audio_processor, gemini_client):
    """Fun√ß√£o utilit√°ria para criar inst√¢ncia do workflow manager"""
    return WorkflowManager(config, transcriber, speaker_mapper, audio_processor, gemini_client)