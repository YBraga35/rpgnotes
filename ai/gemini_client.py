# ai/gemini_client.py
"""
Cliente para intera√ß√£o com a API do Google Gemini - Vers√£o Corrigida
"""
import time
import re
from pathlib import Path
from typing import Tuple, Optional
import google.generativeai as genai
import instructor
from .models import SessionData

class GeminiClient:
    """Cliente para gerar conte√∫do usando Google Gemini"""
    
    def __init__(self, config, lang_config: dict = None, summary_template: Path = None):
        """
        Inicializa o cliente Gemini
        
        Args:
            config: Configura√ß√£o principal
            lang_config: Configura√ß√£o espec√≠fica do idioma (opcional)
            summary_template: Template de sum√°rio escolhido (opcional)
        """
        self.config = config
        self.lang_config = lang_config or {}
        self.summary_template = summary_template
        
        # Configura a API
        if config.GEMINI_API_KEY:
            genai.configure(api_key=config.GEMINI_API_KEY)
        
        # Carrega prompts
        self._load_prompts()
    
    def _load_prompts(self):
        """Carrega os prompts necess√°rios"""
        try:
            # Prompt de sum√°rio do template escolhido ou padr√£o
            if self.summary_template and self.summary_template.exists():
                with open(self.summary_template, 'r', encoding='utf-8') as f:
                    self.summary_prompt = f.read().strip()
            else:
                # Template padr√£o se n√£o especificado
                self.summary_prompt = self._get_default_summary_prompt()
            
            # Prompt de detalhes
            if self.config.DETAILS_PROMPT_FILE.exists():
                with open(self.config.DETAILS_PROMPT_FILE, 'r', encoding='utf-8') as f:
                    self.details_prompt = f.read().strip()
            else:
                self.details_prompt = self._get_default_details_prompt()
                
        except Exception as e:
            print(f"‚ö†Ô∏è Erro ao carregar prompts: {e}")
            self.summary_prompt = self._get_default_summary_prompt()
            self.details_prompt = self._get_default_details_prompt()
    
    def _get_default_summary_prompt(self) -> str:
        """Retorna prompt padr√£o para sum√°rio"""
        return """Voc√™ √© um assistente que cria resumos detalhados de sess√µes de RPG.

Analise a transcri√ß√£o fornecida e crie um resumo extenso e envolvente dos acontecimentos.

Instru√ß√µes:
1. Escreva em linguagem narrativa, como em um conto
2. Transmita a atmosfera da sess√£o
3. Destaque momentos importantes (s√©rios e humor√≠sticos)
4. O resumo deve ter pelo menos 400-500 palavras
5. Capture todos os detalhes relevantes

Gere apenas o resumo, sem t√≠tulo ou coment√°rios adicionais."""
    
    def _get_default_details_prompt(self) -> str:
        """Retorna prompt padr√£o para extra√ß√£o de detalhes"""
        return """Voc√™ √© um assistente que extrai informa√ß√µes estruturadas de sess√µes de RPG.

Analise o sum√°rio e a transcri√ß√£o fornecidos e extraia:
- T√≠tulo da sess√£o
- Eventos principais
- NPCs importantes
- Locais visitados
- Itens relevantes 
- Cita√ß√µes memor√°veis
- Ganchos para pr√≥xima sess√£o
- Sugest√µes de imagens
- Sugest√µes de v√≠deos

Seja preciso e detalhado."""
    
    def generate_session_notes(self, transcript_file: Path) -> Optional[Tuple[str, SessionData]]:
        """
        Gera notas da sess√£o usando IA
        
        Args:
            transcript_file: Arquivo de transcri√ß√£o
            
        Returns:
            Tupla com (sum√°rio, dados_estruturados) ou None se erro
        """
        if not self.config.GEMINI_API_KEY:
            print("‚ùå GEMINI_API_KEY n√£o configurada. Pulando gera√ß√£o de notas.")
            return None
        
        try:
            # Carrega transcri√ß√£o
            print("üìñ Carregando transcri√ß√£o...")
            with open(transcript_file, 'r', encoding='utf-8') as f:
                transcript_content = f.read()
            
            if not transcript_content.strip():
                print("‚ùå Arquivo de transcri√ß√£o est√° vazio.")
                return None
            
            print(f"‚úÖ Transcri√ß√£o carregada: {len(transcript_content)} caracteres")
            
            # Gera sum√°rio detalhado
            print("ü§ñ Gerando sum√°rio detalhado da sess√£o...")
            summary = self._generate_summary(transcript_content)
            
            # Aguarda para respeitar rate limits
            print("‚è≥ Aguardando rate limit da API...")
            time.sleep(10)
            
            # Extrai dados estruturados
            print("üìä Extraindo detalhes estruturados...")
            structured_data = self._extract_structured_details(summary, transcript_content)
            
            print("‚úÖ Notas geradas com sucesso!")
            return summary, structured_data
            
        except Exception as e:
            print(f"‚ùå Erro na gera√ß√£o de notas: {e}")
            return None
    
    def _generate_summary(self, transcript_content: str) -> str:
        """Gera sum√°rio narrativo da sess√£o"""
        try:
            summary_model = genai.GenerativeModel(
                model_name=self.config.GEMINI_MODEL_NAME,
                system_instruction=self.summary_prompt,
            )
            
            messages = []
            
            # Adiciona contexto se dispon√≠vel
            if self.lang_config.get('context_data'):
                messages.append({
                    "role": "user", 
                    "parts": [f"CONTEXTO ADICIONAL DA CAMPANHA:\\n{self.lang_config['context_data']}"]
                })
            
            # Adiciona transcri√ß√£o
            messages.append({
                "role": "user",
                "parts": [f"TRANSCRI√á√ÉO DA SESS√ÉO ATUAL:\\n{transcript_content}"]
            })
            
            response = summary_model.generate_content(
                messages,
                generation_config=genai.GenerationConfig(temperature=0.7),
            )
            
            return response.text
            
        except Exception as e:
            print(f"‚ùå Erro ao gerar sum√°rio: {e}")
            return f"Erro na gera√ß√£o do sum√°rio: {e}"
    
    def _extract_structured_details(self, summary: str, transcript_content: str) -> SessionData:
        """Extrai dados estruturados da sess√£o"""
        try:
            client = instructor.from_gemini(
                client=genai.GenerativeModel(
                    model_name=self.config.GEMINI_MODEL_NAME,
                    system_instruction=self.details_prompt,
                ),
                mode=instructor.Mode.GEMINI_JSON,
            )
            
            message_content = (
                f"SUM√ÅRIO DA SESS√ÉO (use para gerar t√≠tulo, eventos, NPCs, locais, itens e propostas):\\n{summary}\\n\\n"
                f"TRANSCRI√á√ÉO COMPLETA (use APENAS para encontrar cita√ß√µes exatas):\\n{transcript_content}"
            )
            
            session_data = client.chat.completions.create(
                messages=[{
                    "role": "user",
                    "content": message_content
                }],
                response_model=SessionData,
                max_retries=3,
            )
            
            return session_data
            
        except Exception as e:
            print(f"‚ùå Erro na extra√ß√£o de detalhes: {e}")
            # Retorna dados padr√£o em caso de erro
            return SessionData(
                title="Sess√£o de RPG",
                events=["Erro na extra√ß√£o de eventos"],
                npcs=["Erro na extra√ß√£o de NPCs"],
                locations=["Erro na extra√ß√£o de locais"],
                items=["Erro na extra√ß√£o de itens"],
                quotes=["Erro na extra√ß√£o de cita√ß√µes"],
                hooks=["Erro na extra√ß√£o de ganchos"],
                images=["Error extracting image prompts"],
                videos=["Error extracting video prompts"]
            )
    
    def save_summary_file(self, session_summary: str, session_data: SessionData, session_number: int, session_date):
        """
        Salva as notas geradas em um arquivo Markdown formatado
        
        Args:
            session_summary: Sum√°rio da sess√£o
            session_data: Dados estruturados extra√≠dos
            session_number: N√∫mero da sess√£o
            session_date: Data da sess√£o
        """
        try:
            # Carrega template
            if self.config.TEMPLATE_FILE.exists():
                with open(self.config.TEMPLATE_FILE, "r", encoding='utf-8') as f:
                    template = f.read()
            else:
                template = self._get_default_template()
            
            # Formata dados para o template
            output = template.format(
                number=session_number,
                title=session_data.title,
                date=session_date.strftime("%d.%m.%Y"),
                summary=session_summary,
                events="\\n".join(f"* {event}" for event in session_data.events),
                npcs="\\n".join(f"* {npc}" for npc in session_data.npcs),
                locations="\\n".join(f"* {loc}" for loc in session_data.locations),
                items="\\n".join(f"* {item}" for item in session_data.items),
                quotes="\\n".join(f"* {quote}" for quote in session_data.quotes),
                hooks="\\n".join(f"* {hook}" for hook in session_data.hooks),
                images="\\n".join(f"* `{image}`" for image in session_data.images),
                videos="\\n".join(f"* `{video}`" for video in session_data.videos),
            )
            
            # Nome do arquivo seguro
            safe_title = re.sub(r'[\\\\/*?:"<>|]', "", session_data.title)
            output_file = self.config.OUTPUT_DIR / f"Sess√£o {session_number} - {safe_title}.md"
            
            # Salva arquivo
            with open(output_file, "w", encoding='utf-8') as f:
                f.write(output)
            
            print(f"üìÑ Notas da sess√£o salvas: {output_file.name}")
            
        except Exception as e:
            print(f"‚ùå Erro ao salvar notas: {e}")
    
    def _get_default_template(self) -> str:
        """Retorna template padr√£o se n√£o existir arquivo de template"""
        return """# Sess√£o {number}: {title}

**Data:** {date}

## Resumo

{summary}

## Eventos / Decis√µes-Chave

{events}

## Cita√ß√µes Memor√°veis

{quotes}

## Personagens N√£o Jogadores (NPCs)

{npcs}

## Localiza√ß√µes

{locations}

## Itens

{items}

## Propostas para a Pr√≥xima Sess√£o (Para o Mestre)

{hooks}

## Propostas de Imagens

{images}

## Propostas de V√≠deo

{videos}
"""

def create_gemini_client(config, lang_config=None, summary_template=None):
    """Fun√ß√£o utilit√°ria para criar inst√¢ncia do cliente Gemini"""
    return GeminiClient(config, lang_config, summary_template)